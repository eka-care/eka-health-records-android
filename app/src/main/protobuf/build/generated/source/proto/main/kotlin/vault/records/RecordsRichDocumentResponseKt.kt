//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: records.proto

package vault.records;

@kotlin.jvm.JvmName("-initializerecordsRichDocumentResponse")
public inline fun recordsRichDocumentResponse(block: vault.records.RecordsRichDocumentResponseKt.Dsl.() -> kotlin.Unit): vault.records.Records.RecordsRichDocumentResponse =
  vault.records.RecordsRichDocumentResponseKt.Dsl._create(vault.records.Records.RecordsRichDocumentResponse.newBuilder()).apply { block() }._build()
public object RecordsRichDocumentResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: vault.records.Records.RecordsRichDocumentResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: vault.records.Records.RecordsRichDocumentResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): vault.records.Records.RecordsRichDocumentResponse = _builder.build()

    /**
     * <code>string hash = 1;</code>
     */
    public var hash: kotlin.String
      @JvmName("getHash")
      get() = _builder.getHash()
      @JvmName("setHash")
      set(value) {
        _builder.setHash(value)
      }
    /**
     * <code>string hash = 1;</code>
     */
    public fun clearHash() {
      _builder.clearHash()
    }

    /**
     * <code>.vault.records.RecordUploadEventInTransit in_transit = 2;</code>
     */
    public var inTransit: vault.records.Records.RecordUploadEventInTransit
      @JvmName("getInTransit")
      get() = _builder.getInTransit()
      @JvmName("setInTransit")
      set(value) {
        _builder.setInTransit(value)
      }
    /**
     * <code>.vault.records.RecordUploadEventInTransit in_transit = 2;</code>
     */
    public fun clearInTransit() {
      _builder.clearInTransit()
    }
    /**
     * <code>.vault.records.RecordUploadEventInTransit in_transit = 2;</code>
     * @return Whether the inTransit field is set.
     */
    public fun hasInTransit(): kotlin.Boolean {
      return _builder.hasInTransit()
    }

    /**
     * <code>.vault.records.RecordMetadataPlus metadata_analyzing = 3;</code>
     */
    public var metadataAnalyzing: vault.records.Records.RecordMetadataPlus
      @JvmName("getMetadataAnalyzing")
      get() = _builder.getMetadataAnalyzing()
      @JvmName("setMetadataAnalyzing")
      set(value) {
        _builder.setMetadataAnalyzing(value)
      }
    /**
     * <code>.vault.records.RecordMetadataPlus metadata_analyzing = 3;</code>
     */
    public fun clearMetadataAnalyzing() {
      _builder.clearMetadataAnalyzing()
    }
    /**
     * <code>.vault.records.RecordMetadataPlus metadata_analyzing = 3;</code>
     * @return Whether the metadataAnalyzing field is set.
     */
    public fun hasMetadataAnalyzing(): kotlin.Boolean {
      return _builder.hasMetadataAnalyzing()
    }

    /**
     * <code>.vault.records.RecordMetadataPlus metadata_final = 4;</code>
     */
    public var metadataFinal: vault.records.Records.RecordMetadataPlus
      @JvmName("getMetadataFinal")
      get() = _builder.getMetadataFinal()
      @JvmName("setMetadataFinal")
      set(value) {
        _builder.setMetadataFinal(value)
      }
    /**
     * <code>.vault.records.RecordMetadataPlus metadata_final = 4;</code>
     */
    public fun clearMetadataFinal() {
      _builder.clearMetadataFinal()
    }
    /**
     * <code>.vault.records.RecordMetadataPlus metadata_final = 4;</code>
     * @return Whether the metadataFinal field is set.
     */
    public fun hasMetadataFinal(): kotlin.Boolean {
      return _builder.hasMetadataFinal()
    }
    public val availableDocumentCase: vault.records.Records.RecordsRichDocumentResponse.AvailableDocumentCase
      @JvmName("getAvailableDocumentCase")
      get() = _builder.getAvailableDocumentCase()

    public fun clearAvailableDocument() {
      _builder.clearAvailableDocument()
    }
  }
}
public inline fun vault.records.Records.RecordsRichDocumentResponse.copy(block: vault.records.RecordsRichDocumentResponseKt.Dsl.() -> kotlin.Unit): vault.records.Records.RecordsRichDocumentResponse =
  vault.records.RecordsRichDocumentResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val vault.records.Records.RecordsRichDocumentResponseOrBuilder.inTransitOrNull: vault.records.Records.RecordUploadEventInTransit?
  get() = if (hasInTransit()) getInTransit() else null

val vault.records.Records.RecordsRichDocumentResponseOrBuilder.metadataAnalyzingOrNull: vault.records.Records.RecordMetadataPlus?
  get() = if (hasMetadataAnalyzing()) getMetadataAnalyzing() else null

val vault.records.Records.RecordsRichDocumentResponseOrBuilder.metadataFinalOrNull: vault.records.Records.RecordMetadataPlus?
  get() = if (hasMetadataFinal()) getMetadataFinal() else null

