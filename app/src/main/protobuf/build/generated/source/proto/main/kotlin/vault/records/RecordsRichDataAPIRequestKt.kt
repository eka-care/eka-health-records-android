//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: records.proto

package vault.records;

@kotlin.jvm.JvmName("-initializerecordsRichDataAPIRequest")
public inline fun recordsRichDataAPIRequest(block: vault.records.RecordsRichDataAPIRequestKt.Dsl.() -> kotlin.Unit): vault.records.Records.RecordsRichDataAPIRequest =
  vault.records.RecordsRichDataAPIRequestKt.Dsl._create(vault.records.Records.RecordsRichDataAPIRequest.newBuilder()).apply { block() }._build()
public object RecordsRichDataAPIRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: vault.records.Records.RecordsRichDataAPIRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: vault.records.Records.RecordsRichDataAPIRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): vault.records.Records.RecordsRichDataAPIRequest = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class DocumentIdsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated string document_ids = 1;</code>
     * @return A list containing the documentIds.
     */
    public val documentIds: com.google.protobuf.kotlin.DslList<kotlin.String, DocumentIdsProxy>
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getDocumentIdsList()
      )
    /**
     * <code>repeated string document_ids = 1;</code>
     * @param value The documentIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addDocumentIds")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, DocumentIdsProxy>.add(value: kotlin.String) {
      _builder.addDocumentIds(value)
    }
    /**
     * <code>repeated string document_ids = 1;</code>
     * @param value The documentIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignDocumentIds")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, DocumentIdsProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * <code>repeated string document_ids = 1;</code>
     * @param values The documentIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllDocumentIds")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, DocumentIdsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllDocumentIds(values)
    }
    /**
     * <code>repeated string document_ids = 1;</code>
     * @param values The documentIds to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllDocumentIds")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, DocumentIdsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * <code>repeated string document_ids = 1;</code>
     * @param index The index to set the value at.
     * @param value The documentIds to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setDocumentIds")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, DocumentIdsProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setDocumentIds(index, value)
    }/**
     * <code>repeated string document_ids = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearDocumentIds")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, DocumentIdsProxy>.clear() {
      _builder.clearDocumentIds()
    }}
}
public inline fun vault.records.Records.RecordsRichDataAPIRequest.copy(block: vault.records.RecordsRichDataAPIRequestKt.Dsl.() -> kotlin.Unit): vault.records.Records.RecordsRichDataAPIRequest =
  vault.records.RecordsRichDataAPIRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

