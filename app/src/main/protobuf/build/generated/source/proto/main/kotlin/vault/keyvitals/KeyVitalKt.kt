//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: key_vitals.proto

package vault.keyvitals;

@kotlin.jvm.JvmName("-initializekeyVital")
public inline fun keyVital(block: vault.keyvitals.KeyVitalKt.Dsl.() -> kotlin.Unit): vault.keyvitals.KeyVitals.KeyVital =
  vault.keyvitals.KeyVitalKt.Dsl._create(vault.keyvitals.KeyVitals.KeyVital.newBuilder()).apply { block() }._build()
public object KeyVitalKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: vault.keyvitals.KeyVitals.KeyVital.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: vault.keyvitals.KeyVitals.KeyVital.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): vault.keyvitals.KeyVitals.KeyVital = _builder.build()

    /**
     * <pre>
     * Name of the vital.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <pre>
     * Name of the vital.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * <pre>
     * Test EKA ID.
     * </pre>
     *
     * <code>string test_eka_id = 2;</code>
     */
    public var testEkaId: kotlin.String
      @JvmName("getTestEkaId")
      get() = _builder.getTestEkaId()
      @JvmName("setTestEkaId")
      set(value) {
        _builder.setTestEkaId(value)
      }
    /**
     * <pre>
     * Test EKA ID.
     * </pre>
     *
     * <code>string test_eka_id = 2;</code>
     */
    public fun clearTestEkaId() {
      _builder.clearTestEkaId()
    }

    /**
     * <pre>
     * Value of the vital.
     * </pre>
     *
     * <code>optional .vault.keyvitals.KeyVital.Value value = 3;</code>
     */
    public var value: vault.keyvitals.KeyVitals.KeyVital.Value
      @JvmName("getValue")
      get() = _builder.getValue()
      @JvmName("setValue")
      set(value) {
        _builder.setValue(value)
      }
    /**
     * <pre>
     * Value of the vital.
     * </pre>
     *
     * <code>optional .vault.keyvitals.KeyVital.Value value = 3;</code>
     */
    public fun clearValue() {
      _builder.clearValue()
    }
    /**
     * <pre>
     * Value of the vital.
     * </pre>
     *
     * <code>optional .vault.keyvitals.KeyVital.Value value = 3;</code>
     * @return Whether the value field is set.
     */
    public fun hasValue(): kotlin.Boolean {
      return _builder.hasValue()
    }
    public val KeyVitalKt.Dsl.valueOrNull: vault.keyvitals.KeyVitals.KeyVital.Value?
      get() = _builder.valueOrNull
  }
  @kotlin.jvm.JvmName("-initializevalue")
  public inline fun value(block: vault.keyvitals.KeyVitalKt.ValueKt.Dsl.() -> kotlin.Unit): vault.keyvitals.KeyVitals.KeyVital.Value =
    vault.keyvitals.KeyVitalKt.ValueKt.Dsl._create(vault.keyvitals.KeyVitals.KeyVital.Value.newBuilder()).apply { block() }._build()
  public object ValueKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: vault.keyvitals.KeyVitals.KeyVital.Value.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: vault.keyvitals.KeyVitals.KeyVital.Value.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): vault.keyvitals.KeyVitals.KeyVital.Value = _builder.build()

      /**
       * <pre>
       * Value of the vital.
       * </pre>
       *
       * <code>string value = 1;</code>
       */
      public var value: kotlin.String
        @JvmName("getValue")
        get() = _builder.getValue()
        @JvmName("setValue")
        set(value) {
          _builder.setValue(value)
        }
      /**
       * <pre>
       * Value of the vital.
       * </pre>
       *
       * <code>string value = 1;</code>
       */
      public fun clearValue() {
        _builder.clearValue()
      }

      /**
       * <pre>
       * Unit of the vital.
       * </pre>
       *
       * <code>optional string unit = 2;</code>
       */
      public var unit: kotlin.String
        @JvmName("getUnit")
        get() = _builder.getUnit()
        @JvmName("setUnit")
        set(value) {
          _builder.setUnit(value)
        }
      /**
       * <pre>
       * Unit of the vital.
       * </pre>
       *
       * <code>optional string unit = 2;</code>
       */
      public fun clearUnit() {
        _builder.clearUnit()
      }
      /**
       * <pre>
       * Unit of the vital.
       * </pre>
       *
       * <code>optional string unit = 2;</code>
       * @return Whether the unit field is set.
       */
      public fun hasUnit(): kotlin.Boolean {
        return _builder.hasUnit()
      }

      /**
       * <pre>
       * Interpretation of the reading.
       * </pre>
       *
       * <code>optional .vault.vitals.Interpretation result_id = 3;</code>
       */
      public var resultId: vault.vitals.InterpretationOuterClass.Interpretation
        @JvmName("getResultId")
        get() = _builder.getResultId()
        @JvmName("setResultId")
        set(value) {
          _builder.setResultId(value)
        }
      /**
       * <pre>
       * Interpretation of the reading.
       * </pre>
       *
       * <code>optional .vault.vitals.Interpretation result_id = 3;</code>
       */
      public fun clearResultId() {
        _builder.clearResultId()
      }
      /**
       * <pre>
       * Interpretation of the reading.
       * </pre>
       *
       * <code>optional .vault.vitals.Interpretation result_id = 3;</code>
       * @return Whether the resultId field is set.
       */
      public fun hasResultId(): kotlin.Boolean {
        return _builder.hasResultId()
      }

      /**
       * <pre>
       * Date of the vital.
       * </pre>
       *
       * <code>string measured_at = 4;</code>
       */
      public var measuredAt: kotlin.String
        @JvmName("getMeasuredAt")
        get() = _builder.getMeasuredAt()
        @JvmName("setMeasuredAt")
        set(value) {
          _builder.setMeasuredAt(value)
        }
      /**
       * <pre>
       * Date of the vital.
       * </pre>
       *
       * <code>string measured_at = 4;</code>
       */
      public fun clearMeasuredAt() {
        _builder.clearMeasuredAt()
      }
      /**
       * <pre>
       * Date of the vital.
       * </pre>
       *
       * <code>string measured_at = 4;</code>
       * @return Whether the measuredAt field is set.
       */
      public fun hasMeasuredAt(): kotlin.Boolean {
        return _builder.hasMeasuredAt()
      }

      /**
       * <pre>
       * Is the data old.
       * </pre>
       *
       * <code>bool is_old = 5;</code>
       */
      public var isOld: kotlin.Boolean
        @JvmName("getIsOld")
        get() = _builder.getIsOld()
        @JvmName("setIsOld")
        set(value) {
          _builder.setIsOld(value)
        }
      /**
       * <pre>
       * Is the data old.
       * </pre>
       *
       * <code>bool is_old = 5;</code>
       */
      public fun clearIsOld() {
        _builder.clearIsOld()
      }
      /**
       * <pre>
       * Is the data old.
       * </pre>
       *
       * <code>bool is_old = 5;</code>
       * @return Whether the isOld field is set.
       */
      public fun hasIsOld(): kotlin.Boolean {
        return _builder.hasIsOld()
      }
      public val resultCase: vault.keyvitals.KeyVitals.KeyVital.Value.ResultCase
        @JvmName("getResultCase")
        get() = _builder.getResultCase()

      public fun clearResult() {
        _builder.clearResult()
      }
    }
  }
}
public inline fun vault.keyvitals.KeyVitals.KeyVital.copy(block: vault.keyvitals.KeyVitalKt.Dsl.() -> kotlin.Unit): vault.keyvitals.KeyVitals.KeyVital =
  vault.keyvitals.KeyVitalKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public inline fun vault.keyvitals.KeyVitals.KeyVital.Value.copy(block: vault.keyvitals.KeyVitalKt.ValueKt.Dsl.() -> kotlin.Unit): vault.keyvitals.KeyVitals.KeyVital.Value =
  vault.keyvitals.KeyVitalKt.ValueKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val vault.keyvitals.KeyVitals.KeyVitalOrBuilder.valueOrNull: vault.keyvitals.KeyVitals.KeyVital.Value?
  get() = if (hasValue()) getValue() else null

