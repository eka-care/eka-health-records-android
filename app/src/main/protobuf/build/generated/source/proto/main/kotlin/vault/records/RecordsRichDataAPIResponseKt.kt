//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: records.proto

package vault.records;

@kotlin.jvm.JvmName("-initializerecordsRichDataAPIResponse")
public inline fun recordsRichDataAPIResponse(block: vault.records.RecordsRichDataAPIResponseKt.Dsl.() -> kotlin.Unit): vault.records.Records.RecordsRichDataAPIResponse =
  vault.records.RecordsRichDataAPIResponseKt.Dsl._create(vault.records.Records.RecordsRichDataAPIResponse.newBuilder()).apply { block() }._build()
public object RecordsRichDataAPIResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: vault.records.Records.RecordsRichDataAPIResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: vault.records.Records.RecordsRichDataAPIResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): vault.records.Records.RecordsRichDataAPIResponse = _builder.build()

    /**
     * <code>.vault.records.RecordsRichDataResponse response = 1;</code>
     */
    public var response: vault.records.Records.RecordsRichDataResponse
      @JvmName("getResponse")
      get() = _builder.getResponse()
      @JvmName("setResponse")
      set(value) {
        _builder.setResponse(value)
      }
    /**
     * <code>.vault.records.RecordsRichDataResponse response = 1;</code>
     */
    public fun clearResponse() {
      _builder.clearResponse()
    }
    /**
     * <code>.vault.records.RecordsRichDataResponse response = 1;</code>
     * @return Whether the response field is set.
     */
    public fun hasResponse(): kotlin.Boolean {
      return _builder.hasResponse()
    }

    /**
     * <code>.vault.records.RecordsRichDataAPIResponse.Error error = 2;</code>
     */
    public var error: vault.records.Records.RecordsRichDataAPIResponse.Error
      @JvmName("getError")
      get() = _builder.getError()
      @JvmName("setError")
      set(value) {
        _builder.setError(value)
      }
    /**
     * <code>.vault.records.RecordsRichDataAPIResponse.Error error = 2;</code>
     */
    public fun clearError() {
      _builder.clearError()
    }
    /**
     * <code>.vault.records.RecordsRichDataAPIResponse.Error error = 2;</code>
     * @return Whether the error field is set.
     */
    public fun hasError(): kotlin.Boolean {
      return _builder.hasError()
    }
    public val resultCase: vault.records.Records.RecordsRichDataAPIResponse.ResultCase
      @JvmName("getResultCase")
      get() = _builder.getResultCase()

    public fun clearResult() {
      _builder.clearResult()
    }
  }
  @kotlin.jvm.JvmName("-initializeerror")
  public inline fun error(block: vault.records.RecordsRichDataAPIResponseKt.ErrorKt.Dsl.() -> kotlin.Unit): vault.records.Records.RecordsRichDataAPIResponse.Error =
    vault.records.RecordsRichDataAPIResponseKt.ErrorKt.Dsl._create(vault.records.Records.RecordsRichDataAPIResponse.Error.newBuilder()).apply { block() }._build()
  public object ErrorKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: vault.records.Records.RecordsRichDataAPIResponse.Error.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: vault.records.Records.RecordsRichDataAPIResponse.Error.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): vault.records.Records.RecordsRichDataAPIResponse.Error = _builder.build()

      /**
       * <pre>
       * Error Code.
       * </pre>
       *
       * <code>.vault.records.RecordsRichDataAPIResponse.ErrorCode code = 1;</code>
       */
      public var code: vault.records.Records.RecordsRichDataAPIResponse.ErrorCode
        @JvmName("getCode")
        get() = _builder.getCode()
        @JvmName("setCode")
        set(value) {
          _builder.setCode(value)
        }
      /**
       * <pre>
       * Error Code.
       * </pre>
       *
       * <code>.vault.records.RecordsRichDataAPIResponse.ErrorCode code = 1;</code>
       */
      public fun clearCode() {
        _builder.clearCode()
      }

      /**
       * <pre>
       * Error Message.
       * </pre>
       *
       * <code>string message = 2;</code>
       */
      public var message: kotlin.String
        @JvmName("getMessage")
        get() = _builder.getMessage()
        @JvmName("setMessage")
        set(value) {
          _builder.setMessage(value)
        }
      /**
       * <pre>
       * Error Message.
       * </pre>
       *
       * <code>string message = 2;</code>
       */
      public fun clearMessage() {
        _builder.clearMessage()
      }
    }
  }
}
public inline fun vault.records.Records.RecordsRichDataAPIResponse.copy(block: vault.records.RecordsRichDataAPIResponseKt.Dsl.() -> kotlin.Unit): vault.records.Records.RecordsRichDataAPIResponse =
  vault.records.RecordsRichDataAPIResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public inline fun vault.records.Records.RecordsRichDataAPIResponse.Error.copy(block: vault.records.RecordsRichDataAPIResponseKt.ErrorKt.Dsl.() -> kotlin.Unit): vault.records.Records.RecordsRichDataAPIResponse.Error =
  vault.records.RecordsRichDataAPIResponseKt.ErrorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val vault.records.Records.RecordsRichDataAPIResponseOrBuilder.responseOrNull: vault.records.Records.RecordsRichDataResponse?
  get() = if (hasResponse()) getResponse() else null

val vault.records.Records.RecordsRichDataAPIResponseOrBuilder.errorOrNull: vault.records.Records.RecordsRichDataAPIResponse.Error?
  get() = if (hasError()) getError() else null

