//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: records.proto

package vault.records;

@kotlin.jvm.JvmName("-initializerecordMetadata")
public inline fun recordMetadata(block: vault.records.RecordMetadataKt.Dsl.() -> kotlin.Unit): vault.records.Records.RecordMetadata =
  vault.records.RecordMetadataKt.Dsl._create(vault.records.Records.RecordMetadata.newBuilder()).apply { block() }._build()
public object RecordMetadataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: vault.records.Records.RecordMetadata.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: vault.records.Records.RecordMetadata.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): vault.records.Records.RecordMetadata = _builder.build()

    /**
     * <code>optional .vault.common.CTA cta = 1;</code>
     */
    public var cta: vault.common.Cta.CTA
      @JvmName("getCta")
      get() = _builder.getCta()
      @JvmName("setCta")
      set(value) {
        _builder.setCta(value)
      }
    /**
     * <code>optional .vault.common.CTA cta = 1;</code>
     */
    public fun clearCta() {
      _builder.clearCta()
    }
    /**
     * <code>optional .vault.common.CTA cta = 1;</code>
     * @return Whether the cta field is set.
     */
    public fun hasCta(): kotlin.Boolean {
      return _builder.hasCta()
    }
    public val RecordMetadataKt.Dsl.ctaOrNull: vault.common.Cta.CTA?
      get() = _builder.ctaOrNull

    /**
     * <code>optional string thumbnail = 2;</code>
     */
    public var thumbnail: kotlin.String
      @JvmName("getThumbnail")
      get() = _builder.getThumbnail()
      @JvmName("setThumbnail")
      set(value) {
        _builder.setThumbnail(value)
      }
    /**
     * <code>optional string thumbnail = 2;</code>
     */
    public fun clearThumbnail() {
      _builder.clearThumbnail()
    }
    /**
     * <code>optional string thumbnail = 2;</code>
     * @return Whether the thumbnail field is set.
     */
    public fun hasThumbnail(): kotlin.Boolean {
      return _builder.hasThumbnail()
    }

    /**
     * <code>optional .google.protobuf.Timestamp document_date = 3;</code>
     */
    public var documentDate: com.google.protobuf.Timestamp
      @JvmName("getDocumentDate")
      get() = _builder.getDocumentDate()
      @JvmName("setDocumentDate")
      set(value) {
        _builder.setDocumentDate(value)
      }
    /**
     * <code>optional .google.protobuf.Timestamp document_date = 3;</code>
     */
    public fun clearDocumentDate() {
      _builder.clearDocumentDate()
    }
    /**
     * <code>optional .google.protobuf.Timestamp document_date = 3;</code>
     * @return Whether the documentDate field is set.
     */
    public fun hasDocumentDate(): kotlin.Boolean {
      return _builder.hasDocumentDate()
    }
    public val RecordMetadataKt.Dsl.documentDateOrNull: com.google.protobuf.Timestamp?
      get() = _builder.documentDateOrNull

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class TagsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .vault.records.Tag tags = 4;</code>
     */
     public val tags: com.google.protobuf.kotlin.DslList<vault.records.DocumentTags.Tag, TagsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getTagsList()
      )
    /**
     * <code>repeated .vault.records.Tag tags = 4;</code>
     * @param value The tags to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addTags")
    public fun com.google.protobuf.kotlin.DslList<vault.records.DocumentTags.Tag, TagsProxy>.add(value: vault.records.DocumentTags.Tag) {
      _builder.addTags(value)
    }/**
     * <code>repeated .vault.records.Tag tags = 4;</code>
     * @param value The tags to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignTags")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<vault.records.DocumentTags.Tag, TagsProxy>.plusAssign(value: vault.records.DocumentTags.Tag) {
      add(value)
    }/**
     * <code>repeated .vault.records.Tag tags = 4;</code>
     * @param values The tags to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllTags")
    public fun com.google.protobuf.kotlin.DslList<vault.records.DocumentTags.Tag, TagsProxy>.addAll(values: kotlin.collections.Iterable<vault.records.DocumentTags.Tag>) {
      _builder.addAllTags(values)
    }/**
     * <code>repeated .vault.records.Tag tags = 4;</code>
     * @param values The tags to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllTags")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<vault.records.DocumentTags.Tag, TagsProxy>.plusAssign(values: kotlin.collections.Iterable<vault.records.DocumentTags.Tag>) {
      addAll(values)
    }/**
     * <code>repeated .vault.records.Tag tags = 4;</code>
     * @param index The index to set the value at.
     * @param value The tags to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setTags")
    public operator fun com.google.protobuf.kotlin.DslList<vault.records.DocumentTags.Tag, TagsProxy>.set(index: kotlin.Int, value: vault.records.DocumentTags.Tag) {
      _builder.setTags(index, value)
    }/**
     * <code>repeated .vault.records.Tag tags = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearTags")
    public fun com.google.protobuf.kotlin.DslList<vault.records.DocumentTags.Tag, TagsProxy>.clear() {
      _builder.clearTags()
    }}
}
public inline fun vault.records.Records.RecordMetadata.copy(block: vault.records.RecordMetadataKt.Dsl.() -> kotlin.Unit): vault.records.Records.RecordMetadata =
  vault.records.RecordMetadataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val vault.records.Records.RecordMetadataOrBuilder.ctaOrNull: vault.common.Cta.CTA?
  get() = if (hasCta()) getCta() else null

val vault.records.Records.RecordMetadataOrBuilder.documentDateOrNull: com.google.protobuf.Timestamp?
  get() = if (hasDocumentDate()) getDocumentDate() else null

