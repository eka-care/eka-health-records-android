//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: records.proto

package vault.records;

@kotlin.jvm.JvmName("-initializerecord")
public inline fun record(block: vault.records.RecordKt.Dsl.() -> kotlin.Unit): vault.records.Records.Record =
  vault.records.RecordKt.Dsl._create(vault.records.Records.Record.newBuilder()).apply { block() }._build()
public object RecordKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: vault.records.Records.Record.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: vault.records.Records.Record.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): vault.records.Records.Record = _builder.build()

    /**
     * <code>.vault.records.Record.Item item = 1;</code>
     */
    public var item: vault.records.Records.Record.Item
      @JvmName("getItem")
      get() = _builder.getItem()
      @JvmName("setItem")
      set(value) {
        _builder.setItem(value)
      }
    /**
     * <code>.vault.records.Record.Item item = 1;</code>
     */
    public fun clearItem() {
      _builder.clearItem()
    }
    /**
     * <code>.vault.records.Record.Item item = 1;</code>
     * @return Whether the item field is set.
     */
    public fun hasItem(): kotlin.Boolean {
      return _builder.hasItem()
    }

    /**
     * <pre>
     * Hash of the record.
     * </pre>
     *
     * <code>string hash = 2;</code>
     */
    public var hash: kotlin.String
      @JvmName("getHash")
      get() = _builder.getHash()
      @JvmName("setHash")
      set(value) {
        _builder.setHash(value)
      }
    /**
     * <pre>
     * Hash of the record.
     * </pre>
     *
     * <code>string hash = 2;</code>
     */
    public fun clearHash() {
      _builder.clearHash()
    }
  }
  @kotlin.jvm.JvmName("-initializeitem")
  public inline fun item(block: vault.records.RecordKt.ItemKt.Dsl.() -> kotlin.Unit): vault.records.Records.Record.Item =
    vault.records.RecordKt.ItemKt.Dsl._create(vault.records.Records.Record.Item.newBuilder()).apply { block() }._build()
  public object ItemKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: vault.records.Records.Record.Item.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: vault.records.Records.Record.Item.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): vault.records.Records.Record.Item = _builder.build()

      /**
       * <code>string document_id = 1;</code>
       */
      public var documentId: kotlin.String
        @JvmName("getDocumentId")
        get() = _builder.getDocumentId()
        @JvmName("setDocumentId")
        set(value) {
          _builder.setDocumentId(value)
        }
      /**
       * <code>string document_id = 1;</code>
       */
      public fun clearDocumentId() {
        _builder.clearDocumentId()
      }

      /**
       * <code>.google.protobuf.Timestamp upload_date = 2;</code>
       */
      public var uploadDate: com.google.protobuf.Timestamp
        @JvmName("getUploadDate")
        get() = _builder.getUploadDate()
        @JvmName("setUploadDate")
        set(value) {
          _builder.setUploadDate(value)
        }
      /**
       * <code>.google.protobuf.Timestamp upload_date = 2;</code>
       */
      public fun clearUploadDate() {
        _builder.clearUploadDate()
      }
      /**
       * <code>.google.protobuf.Timestamp upload_date = 2;</code>
       * @return Whether the uploadDate field is set.
       */
      public fun hasUploadDate(): kotlin.Boolean {
        return _builder.hasUploadDate()
      }

      /**
       * <code>.vault.records.DocumentType document_type = 3;</code>
       */
      public var documentType: vault.records.DocumentTypes.DocumentType
        @JvmName("getDocumentType")
        get() = _builder.getDocumentType()
        @JvmName("setDocumentType")
        set(value) {
          _builder.setDocumentType(value)
        }
      /**
       * <code>.vault.records.DocumentType document_type = 3;</code>
       */
      public fun clearDocumentType() {
        _builder.clearDocumentType()
      }

      /**
       * <code>optional .vault.records.Record.Item.Source source = 4;</code>
       */
      public var source: vault.records.Records.Record.Item.Source
        @JvmName("getSource")
        get() = _builder.getSource()
        @JvmName("setSource")
        set(value) {
          _builder.setSource(value)
        }
      /**
       * <code>optional .vault.records.Record.Item.Source source = 4;</code>
       */
      public fun clearSource() {
        _builder.clearSource()
      }
      /**
       * <code>optional .vault.records.Record.Item.Source source = 4;</code>
       * @return Whether the source field is set.
       */
      public fun hasSource(): kotlin.Boolean {
        return _builder.hasSource()
      }

      /**
       * <code>.vault.records.RecordUploadEventInTransit in_transit = 5;</code>
       */
      public var inTransit: vault.records.Records.RecordUploadEventInTransit
        @JvmName("getInTransit")
        get() = _builder.getInTransit()
        @JvmName("setInTransit")
        set(value) {
          _builder.setInTransit(value)
        }
      /**
       * <code>.vault.records.RecordUploadEventInTransit in_transit = 5;</code>
       */
      public fun clearInTransit() {
        _builder.clearInTransit()
      }
      /**
       * <code>.vault.records.RecordUploadEventInTransit in_transit = 5;</code>
       * @return Whether the inTransit field is set.
       */
      public fun hasInTransit(): kotlin.Boolean {
        return _builder.hasInTransit()
      }

      /**
       * <code>.vault.records.RecordMetadata metadata = 6;</code>
       */
      public var metadata: vault.records.Records.RecordMetadata
        @JvmName("getMetadata")
        get() = _builder.getMetadata()
        @JvmName("setMetadata")
        set(value) {
          _builder.setMetadata(value)
        }
      /**
       * <code>.vault.records.RecordMetadata metadata = 6;</code>
       */
      public fun clearMetadata() {
        _builder.clearMetadata()
      }
      /**
       * <code>.vault.records.RecordMetadata metadata = 6;</code>
       * @return Whether the metadata field is set.
       */
      public fun hasMetadata(): kotlin.Boolean {
        return _builder.hasMetadata()
      }

      /**
       * <code>string patient_oid = 7;</code>
       */
      public var patientOid: kotlin.String
        @JvmName("getPatientOid")
        get() = _builder.getPatientOid()
        @JvmName("setPatientOid")
        set(value) {
          _builder.setPatientOid(value)
        }
      /**
       * <code>string patient_oid = 7;</code>
       */
      public fun clearPatientOid() {
        _builder.clearPatientOid()
      }
      public val availableDocumentCase: vault.records.Records.Record.Item.AvailableDocumentCase
        @JvmName("getAvailableDocumentCase")
        get() = _builder.getAvailableDocumentCase()

      public fun clearAvailableDocument() {
        _builder.clearAvailableDocument()
      }
    }
  }
}
public inline fun vault.records.Records.Record.copy(block: vault.records.RecordKt.Dsl.() -> kotlin.Unit): vault.records.Records.Record =
  vault.records.RecordKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public inline fun vault.records.Records.Record.Item.copy(block: vault.records.RecordKt.ItemKt.Dsl.() -> kotlin.Unit): vault.records.Records.Record.Item =
  vault.records.RecordKt.ItemKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val vault.records.Records.Record.ItemOrBuilder.uploadDateOrNull: com.google.protobuf.Timestamp?
  get() = if (hasUploadDate()) getUploadDate() else null

val vault.records.Records.Record.ItemOrBuilder.inTransitOrNull: vault.records.Records.RecordUploadEventInTransit?
  get() = if (hasInTransit()) getInTransit() else null

val vault.records.Records.Record.ItemOrBuilder.metadataOrNull: vault.records.Records.RecordMetadata?
  get() = if (hasMetadata()) getMetadata() else null

val vault.records.Records.RecordOrBuilder.itemOrNull: vault.records.Records.Record.Item?
  get() = if (hasItem()) getItem() else null

