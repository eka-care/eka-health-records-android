//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: media.proto

package vault.media;

@kotlin.jvm.JvmName("-initializemediaCTA")
public inline fun mediaCTA(block: vault.media.MediaCTAKt.Dsl.() -> kotlin.Unit): vault.media.MediaOuterClass.MediaCTA =
  vault.media.MediaCTAKt.Dsl._create(vault.media.MediaOuterClass.MediaCTA.newBuilder()).apply { block() }._build()
public object MediaCTAKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: vault.media.MediaOuterClass.MediaCTA.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: vault.media.MediaOuterClass.MediaCTA.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): vault.media.MediaOuterClass.MediaCTA = _builder.build()

    /**
     * <pre>
     * Media.
     * </pre>
     *
     * <code>.vault.media.Media media = 1;</code>
     */
    public var media: vault.media.MediaOuterClass.Media
      @JvmName("getMedia")
      get() = _builder.getMedia()
      @JvmName("setMedia")
      set(value) {
        _builder.setMedia(value)
      }
    /**
     * <pre>
     * Media.
     * </pre>
     *
     * <code>.vault.media.Media media = 1;</code>
     */
    public fun clearMedia() {
      _builder.clearMedia()
    }
    /**
     * <pre>
     * Media.
     * </pre>
     *
     * <code>.vault.media.Media media = 1;</code>
     * @return Whether the media field is set.
     */
    public fun hasMedia(): kotlin.Boolean {
      return _builder.hasMedia()
    }

    /**
     * <pre>
     * CTA configuration for button.
     * </pre>
     *
     * <code>.vault.common.CTA cta = 2;</code>
     */
    public var cta: vault.common.Cta.CTA
      @JvmName("getCta")
      get() = _builder.getCta()
      @JvmName("setCta")
      set(value) {
        _builder.setCta(value)
      }
    /**
     * <pre>
     * CTA configuration for button.
     * </pre>
     *
     * <code>.vault.common.CTA cta = 2;</code>
     */
    public fun clearCta() {
      _builder.clearCta()
    }
    /**
     * <pre>
     * CTA configuration for button.
     * </pre>
     *
     * <code>.vault.common.CTA cta = 2;</code>
     * @return Whether the cta field is set.
     */
    public fun hasCta(): kotlin.Boolean {
      return _builder.hasCta()
    }
  }
}
public inline fun vault.media.MediaOuterClass.MediaCTA.copy(block: vault.media.MediaCTAKt.Dsl.() -> kotlin.Unit): vault.media.MediaOuterClass.MediaCTA =
  vault.media.MediaCTAKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val vault.media.MediaOuterClass.MediaCTAOrBuilder.mediaOrNull: vault.media.MediaOuterClass.Media?
  get() = if (hasMedia()) getMedia() else null

val vault.media.MediaOuterClass.MediaCTAOrBuilder.ctaOrNull: vault.common.Cta.CTA?
  get() = if (hasCta()) getCta() else null

