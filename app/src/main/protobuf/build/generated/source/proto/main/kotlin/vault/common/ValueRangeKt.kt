//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: range.proto

package vault.common;

@kotlin.jvm.JvmName("-initializevalueRange")
public inline fun valueRange(block: vault.common.ValueRangeKt.Dsl.() -> kotlin.Unit): vault.common.Range.ValueRange =
  vault.common.ValueRangeKt.Dsl._create(vault.common.Range.ValueRange.newBuilder()).apply { block() }._build()
public object ValueRangeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: vault.common.Range.ValueRange.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: vault.common.Range.ValueRange.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): vault.common.Range.ValueRange = _builder.build()

    /**
     * <pre>
     * low of the range.
     * </pre>
     *
     * <code>optional double low = 1;</code>
     */
    public var low: kotlin.Double
      @JvmName("getLow")
      get() = _builder.getLow()
      @JvmName("setLow")
      set(value) {
        _builder.setLow(value)
      }
    /**
     * <pre>
     * low of the range.
     * </pre>
     *
     * <code>optional double low = 1;</code>
     */
    public fun clearLow() {
      _builder.clearLow()
    }
    /**
     * <pre>
     * low of the range.
     * </pre>
     *
     * <code>optional double low = 1;</code>
     * @return Whether the low field is set.
     */
    public fun hasLow(): kotlin.Boolean {
      return _builder.hasLow()
    }

    /**
     * <pre>
     * high of the range.
     * </pre>
     *
     * <code>optional double high = 2;</code>
     */
    public var high: kotlin.Double
      @JvmName("getHigh")
      get() = _builder.getHigh()
      @JvmName("setHigh")
      set(value) {
        _builder.setHigh(value)
      }
    /**
     * <pre>
     * high of the range.
     * </pre>
     *
     * <code>optional double high = 2;</code>
     */
    public fun clearHigh() {
      _builder.clearHigh()
    }
    /**
     * <pre>
     * high of the range.
     * </pre>
     *
     * <code>optional double high = 2;</code>
     * @return Whether the high field is set.
     */
    public fun hasHigh(): kotlin.Boolean {
      return _builder.hasHigh()
    }
  }
}
public inline fun vault.common.Range.ValueRange.copy(block: vault.common.ValueRangeKt.Dsl.() -> kotlin.Unit): vault.common.Range.ValueRange =
  vault.common.ValueRangeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

