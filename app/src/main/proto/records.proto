syntax = "proto3";

package vault.records;

import "google/protobuf/timestamp.proto";
import "cta.proto";
import "document_types.proto";
import "document_tags.proto";

option go_package = "github.com/eka-care/proto-contracts/go/vault/records";

message RecordUploadEventInTransit {}

message RecordMetadata {
  optional vault.common.CTA cta = 1;
  optional string thumbnail = 2;
  optional google.protobuf.Timestamp document_date = 3;
  repeated Tag tags = 4;
}

/* Record represents a document in list of records. */
message Record {
  Item item = 1;
  string hash = 2; // Hash of the record.

  message Item {
    string document_id = 1;
    google.protobuf.Timestamp upload_date = 2;
    DocumentType document_type = 3;
    optional Source source = 4;
    oneof available_document {
      RecordUploadEventInTransit in_transit = 5;
      RecordMetadata metadata = 6;
    }
    string patient_oid = 7;

    enum Source {
      SOURCE_UNSPECIFIED = 0;
      SOURCE_GMAIL = 1;
      SOURCE_ABHA = 2;
      SOURCE_WHATSAPP = 3;
      SOURCE_EMAIL_FORWARD = 4;
      SOURCE_HXNG = 5;
    }
  }
}

/* Item represents an item part of listing of records. */
message Item {
  oneof result { Record record = 1; }
}

/* RecordsResponse represents list of records or any items that we intend to
 * place in between of records. */
message RecordsResponse {
  repeated Item items = 1;
  optional string next_page_token = 2;
}

/* RecordsAPIResponse represents api response of records listing. */
message RecordsAPIResponse {
  /* ErrorCode represents list of errors */
  enum ErrorCode {
    ERROR_UNSPECIFIED = 0; // Error -> Unspecified.
  }

  /* Error represents error resonse of API */
  message Error {
    ErrorCode code = 1; // Error Code.
    string message = 2; // Error Message.
  }

  oneof result {
    RecordsResponse response = 1;
    Error error = 2;
  }
}

message RecordMetadataPlus {
  RecordMetadata metadata = 1;
  DocumentType document_type = 2;
}

message RecordsRichDocumentResponse {
  string hash = 1;
  oneof available_document {
    RecordUploadEventInTransit in_transit = 2;
    RecordMetadataPlus metadata_analyzing = 3;
    RecordMetadataPlus metadata_final = 4;
  }
}

/* RecordsRichDataResponse represents list of records. */
message RecordsRichDataResponse {
  repeated RecordsRichDocumentResponse data = 1;
}

message RecordsRichDataAPIResponse {
  /* ErrorCode represents list of errors */
  enum ErrorCode {
    ERROR_UNSPECIFIED = 0; // Error -> Unspecified.
  }

  /* Error represents error resonse of API */
  message Error {
    ErrorCode code = 1; // Error Code.
    string message = 2; // Error Message.
  }

  oneof result {
    RecordsRichDataResponse response = 1;
    Error error = 2;
  }
}

message RecordsRichDataAPIRequest { repeated string document_ids = 1; }

message RecordDetailsForEditForm {
  string oid = 1;
  bool linked_with_abha = 2;
  DocumentType document_type = 3;
  repeated string user_tags = 4;
  repeated string derived_tags = 5;
  optional google.protobuf.Timestamp document_date = 6;
  repeated string shared_with = 7;
  bool order_meds = 8;
}

message RecordDetailsForEditFormAPIResponse {
  /* ErrorCode represents list of errors */
  enum ErrorCode {
    ERROR_UNSPECIFIED = 0; // Error -> Unspecified.
  }

  /* Error represents error resonse of API */
  message Error {
    ErrorCode code = 1; // Error Code.
    string message = 2; // Error Message.
  }

  oneof result {
    RecordDetailsForEditForm response = 1;
    Error error = 2;
  }
}