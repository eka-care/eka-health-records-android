syntax = "proto3";

package insurance;
import "cta.proto";
import "gender.proto";
import "types.proto";
import "value.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/eka-care/proto-contracts/go/insurance";

message InsurerInfo {
  string img = 1;
  optional string name = 2;
}

message Age {
  int32 age = 1;
  Unit unit = 2;

  enum Unit {
    UNIT_UNSPECIFIED = 0;
    UNIT_YEAR = 1;
    UNIT_MONTH = 2;
    UNIT_DAY = 3;
  }
}

message Member {
  optional Age age = 1;
  optional Gender gender = 2;
  optional string name = 3;
  optional string id = 4;
  string db_id = 5;
  optional string p_oid = 6;
}

message PolicyItem {
  string title = 1;
  optional string value = 2;
  Type type = 3;

  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_POLICY_TYPE = 1;
    TYPE_POLICY_FOR = 2;
    TYPE_POLICY_NUMBER = 3;
    TYPE_POLICY_END_DATE = 4;
    TYPE_SUM_INSURED = 5;
    TYPE_PREMIUM = 6;
  }
}

message SuperTopUpCardValue {
  Value premium = 1;
  Value coverage = 2;
}

message SuperTopUpCard {
  string title = 1;
  string sub_title = 2;
  vault.common.CTA cta = 3;
  string img = 4;
  optional CardCategory card_category = 5;
  SuperTopUpCardValue card_value = 6;

  enum CardCategory {
    CARD_CATEGORY_UNSPECIFIED = 0;
    CARD_CATEGORY_PRIMARY = 1;
    CARD_CATEGORY_SECONDARY = 2;
    CARD_CATEGORY_TERTIARY = 3;
  }
}

message Coverage {
  CoverageStatus coverage_status = 1;
  Value recommended = 2;
  optional SuperTopUpCard super_top_up_card = 3;

  enum CoverageStatus {
    COVERAGE_STATUS_UNSPECIFIED = 0;
    COVERAGE_STATUS_BASIC = 1;
    COVERAGE_STATUS_STANDARD = 2;
    COVERAGE_STATUS_PREMIUM = 3;
  }
}

message PolicyType {
  Type type = 1;
  optional SubType sub_type = 2;
  optional Value deductible = 3;
}

message PolicyDates {
  optional ValueDate start_date = 1;
  google.protobuf.Timestamp current_date = 2;
  optional ValueDate end_date = 3;
}

message PolicyDetails {
  repeated PolicyItem policy_item = 1;
  repeated Member insured_members = 2;
  optional int32 sum_insured_val = 3 [ deprecated = true ];
  optional PolicyStatus policy_status = 4;
  optional Coverage coverage = 5;
  PolicyType policy_type = 6;
  optional Value sum_insured = 7;
  PolicyDates policy_dates = 8;

  enum PolicyStatus {
    POLICY_STATUS_UNSPECIFIED = 0;
    POLICY_STATUS_ACTIVE = 1;
    POLICY_STATUS_INACTIVE = 2;
    POLICY_STATUS_DUE_SOON = 3;
  }
}

message OverallPoliciesSummary { int32 count = 1; }

message InsuranceData {
  InsurerInfo insurer = 1;
  PolicyDetails policy_details = 2;
  vault.common.CTA policy_document_cta = 3;
  OverallPoliciesSummary overall_summary = 4;
}

/* ErrorCode represents list of errors */
enum ErrorCode {
  ERROR_UNSPECIFIED = 0; // Error -> Unspecified.
}

/* Error represents error resonse of API */
message Error {
  ErrorCode code = 1; // Error Code.
  string message = 2; // Error Message.
}

message InsuranceAPIResponse {
  oneof result {
    InsuranceData response = 1;
    Error error = 2;
  }
}